{"ts":1354151749507,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!doctype html>\n    <html>\n    <head>\n        <title>Beginning Node.js</title>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/normalize.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/presentation.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/prettify.css\" />\n        <link  href=\"http://fonts.googleapis.com/css?family=Ubuntu:300,300italic,regular,italic,500,500italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n        <script src=\"../js/jquery.js\" type=\"text/javascript\"></script>\n        <script src=\"../js/fathom.js\"></script>\n        <script src=\"../js/prettify.js\"></script>\n        <script>\n        $(document).ready(function(){\n            $('pre').addClass('prettyprint').attr('tabIndex', 0);\n            prettyPrint();\n\n            var fathom = $('#presentation').fathom({\n                onActivateSlide: function() {\n                    var $slide = $(this);\n                    $slide.find('pre:first').focus();\n                }\n            });\n        });\n        </script>\n    </head>\n    <body>\n        <div id=\"presentation\">\n            <div id=\"presentation-counter\"></div>\n            <div id=\"slides\">\n\n            <div class=\"slide normal\">\n                <h1 class=\"center\">Beginning Node.js</h1>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Notable Node facts</h1></header>\n                <section class=\"content\">\n                    <ul>\n                        <li>Ain't yo' momma's JavaScript</li>\n                        <li>Non-blocking, event-based web programming</li>\n                        <li>Asyncronous programming for the web</li>\n                        <li>Brand-spanking new</li>\n                        <li>Super popular</li>\n                        <li>Made by someone with no formal CS education.</li>\n                    </ul>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Asyncronous Programming</h1></header>\n                <section class=\"content\">\n                    <p>Allows multiple things to happen at once</p>\n                    <pre style=\"border:3px dotted black;\" class=\"prettyprint\">\nsendTwitterUpdate(\"I just learned Asyncronous Programming!\", function(response){\n    console.log(\"Twitter says:\" + response);\n});\n\nsendFacebookUpdate(\"I just learned Asyncronous Programming!\" function(response) {\n    console.log(\"Facebook says:\" + response);\n});\n                    </pre>\n\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Asyncronous Programming</h1></header>\n                <section class=\"content\">\n                    <p>Multitasking is something computers are good at - using spare miliseconds to do things.</p>\n                    <p>It's something programmers are not always so great at - race conditions can be a problem.</p>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\">Demonstrate what might happen if I counted on twitter being done before facebook, etc.</pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Non-blocking I/O</h1></header>\n                <section class=\"content\">\n                    <p>The reason we can do this is because of non-blocking I/O. We can start a disk read, or some internet activity, and while we're waiting for that to finish, we can do something else.</p>\n                    <pre style=\"border:3px dotted black;\" class=\"prettyprint\">\nfs.rename('/tmp/hello', '/tmp/world', function (err) {\n  if (err) throw err;\n  console.log('renamed complete');\n});\nfs.stat('/tmp/world', function (err, stats) {\n  if (err) throw err;\n  console.log('stats: ' + JSON.stringify(stats));\n});\n                    </pre>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Events</h1></header>\n                <section class=\"content\">\n                    <p>Responding to events is how we manage the flow of control in a node.js web application.</p>\n                    <pre style=\"border:3px dotted black;\" class=\"prettyprint\">\nvar events = require('events');\n\nvar actionHero = new events.EventEmitter();\n\nactionHero.addListener('killBadGuys', function (){\n    console.log(\"I killed all the bad guys!\");\n})\n\nactionHero.emit('killBadGuys');\n                    </pre>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Callbacks</h1></header>\n                <section class=\"content\">\n                    <p>Callbacks are how we handle a series of events that need to occur in response to an event, but syncronously. A callback is often executed at the end of a statement.</p>\n                    <pre style=\"border:3px dotted black;\" class=\"prettyprint\">\nfunction fightBadGuys(superpower, callback) {\n    console.log(\"I'll fight the bad guys with my \" + superpower);\n    var result = true;\n    var err = null;\n    setTimeout(callback(err, result), 3000);\n}\n\nfightBadGuys('hacker skills', function(err, result) {\n    if (err) {\n        console.log(\"There was a problem fighting the bad guys. Pick a better superpower next time.\");\n        return false;\n    } else {\n        console.log(\"I fought the bad guys and now they are defeated\");\n        return true;\n    }\n});\n                    </pre>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Node Conventions</h1></header>\n                <section class=\"content\">\n                    <p>Node has many conventions - you can expect a library or module to have certain behaviors and spelling. Some of those are:</p>\n                    <ul>\n                        <li>Functions that have a callback that must return a result return err, response(if warranted) and then result.</li>\n                        <li>Classes start with a capital letter- as in events.EventEmitter. Methods are camelCase.</li>\n                        <li>Constants ARE_IN_ALL_CAPS and use underscores. Constants should not change.</li>\n                        <li>Many more...</li>\n                    </ul>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\">err, response</pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Callback Chaining</h1></header>\n                <section class=\"content\">\n                    <p>Callback chains are something that tends to happen when things have to happen syncronously in node.\n                    Things like asking the disk for a file, then reading the file, or modifying the file, and then saving the file.</p>\n                    <pre style=\"border:3px dotted black;\" class=\"prettyprint\">\none(function () {\n    //do stuff\n    two(function () {\n        //more stuff\n        three(function () {\n            //the dreaded callback pyramid\n        });\n    });\n});\n                    </pre>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Race Conditions!</h1></header>\n                <section class=\"content\">\n                    <p>In asyncronous programming, you have to be careful with \"Race Conditions\".</p>\n                    <pre style=\"border:3px dotted black;\" class=\"prettyprint\">\nvar fs = require('fs');\nvar path = 'examples/exampleFile.txt';\nvar newData = 'File Overwritten!';\n\nfs.readFile(path, function(err, data) {\n    console.log(err);\n    var file = data.toString();\n    console.log('I am done reading files! It looks like this: ' + file);\n});\n\nfs.writeFile(path, newData, 'utf8', function(err) {\n    console.log(err);\n    console.log('I have written ' + newData + ' to the file');\n});\n                    </pre>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1 class=\"center\"><a href=\"../excercises/fileserver.html\">Excercise Time!</a></h1></header>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Be Careful with State</h1></header>\n                <section class=\"content\">\n                    <p>State is a snapshot of everything the application knows right now. Users can also be said to have state, but HTTP by nature is \"stateless\". Browsers must authenticate with every request in order to maintain that the server remembers who they are. Doing multiple operations per request is fine, but be sure you keep in mind when and where things happen.</p>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Syncronous Methods</h1></header>\n                <section class=\"content\">\n                    <p>There are several methods that can be performed syncronously - they force the process to halt as long as the are working. This is bad in the practice of something like a webserver, because it cannot respond to additional requests.</p>\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n\n            <div class=\"slide normal\">\n                <header><h1>Globals</h1></header>\n                <section class=\"content\">\n\n                </section>\n                <pre class=\"speaker-notes\" style=\"display:none\"></pre>\n            </div>\n        </div>\n    </body>"]],"start1":0,"start2":0,"length1":0,"length2":10185}]],"length":10185}
